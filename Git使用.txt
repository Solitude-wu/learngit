2022_0726
1、修改文件（在git仓库文件夹下添加文件）
	1）命令 git add 添加文件（可以反复多次调用）
	2）命令 git commit -m "message" 添加本次修改说明
2、查看仓库状态
	1）命令 git status 可以查看当前仓库的状态
	2）命令 git diff 可以查看具体修改内容
3、版本回退
	1）命令 git log 可以查看文件修改日志（加后缀--pretty=oneline可以精简log内容）
	2）命令 git reset --hard <版本号> 可以回退到对应的版本
	3）命令 git reflog 会记录每一次命令
4、撤销修改
	1）场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout --<file>。	2）场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。	3）场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库	
5、推送远程库（push）
	1）要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
	例如：$ git remote add origin git@github.com:Solitude-wu/learngit.git
	2）关联一个远程库时必须给远程库指定一个名字，origin是默认习惯命名；
	3）关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
6、克隆远程库（clone）
	1）git clone git@github.com:Solitude-wu/learngit.git
7、关于多台电脑同步一个github账号的操作
	1）安装git 
	2）git bash中声名机器（电脑）的“身份”
		$ git config --global user.name "Your Name"
		$ git config --global user.email "email@example.com"
	3）创建SSH Key，一路回车
		$ ssh-keygen -t rsa -C "youremail@example.com"
	4）登陆GitHub，Settings->SSH and GPG keys->New SSHs 填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

2022_0727
1、创建与合并分支
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>或者git switch <name>
	创建+切换分支：git checkout -b <name>或者git switch -c <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
	强制删除分支： git branch -D <name>
	通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
	如果要强制禁用Fastforward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息
	->使用命令 git merge --no-ff -m 合并

2022_0803
1、解决分支合并冲突
	当两个分支都做了对应的修改，若使用 git merge 命令进行合并，此时就会有冲突。
	可以使用 git status 查看冲突内容，同时修改分支中内容，再次提交（git add、git commit）即可完成合并
	->使用命令 git log --graph --pretty=oneline --abbrev-commit 可以看到树状合并情况图
2、分支管理策略
	在实际开发中，我们应该按照几个基本原则进行分支管理：
	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
	干活都在dev分支上，也就是说，dev分支是不稳定的
	到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本
	你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
3、Bug分支
	当我们在dev分支上进行工作，但是突然接到一个修复代号101的bug任务时（在master上），很自然地，你想创建
	一个分支issue-101来修复它，但是当前正在dev上进行的工作还没有提交（类似于突然来了一个中断），
	此时可先保护现场	->使用命令 git stash 可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
						->使用命令 git stash list 可以查看工作现场的情况
	当bug解决之后 		->使用命令 git stash apply 或者 ->使用命令 git stash pop	恢复
	注意：dev是从master上分支出来的，所以这个bug也在dev分支上，需要把master上<修改的内容>添加到dev分支上
	->使用命令 git cherry-pick <commit> 即可把commit这个提交所做的修改“复制”到dev分支，而不改变其他内容